{
	"info": {
		"_postman_id": "e2bb3023-3548-4cf6-a967-54318825ccf8",
		"name": "Tilkynna Quickstart",
		"description": "Postman collection for interacting with the Tilkynna service, an enterprise grade utility-style report server.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Session Oauth Token",
			"item": [
				{
					"name": "Get Key Session Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "abae20ae-67c5-4864-86b2-2a6c7ad1374f",
								"exec": [
									"pm.test(\"Check Access Token was returned. Set session_access_token environment variable.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('access_token');",
									"    pm.environment.set(\"session_access_token\", jsonData.access_token);",
									"    console.log(\"Access Token:\"+jsonData.access_token);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "grant_type",
									"value": "password",
									"type": "text"
								},
								{
									"key": "username",
									"value": "test-user",
									"type": "text"
								},
								{
									"key": "password",
									"value": "test-user",
									"type": "text"
								},
								{
									"key": "client_id",
									"value": "tilkynna",
									"type": "text"
								},
								{
									"key": "client_secret",
									"value": "{{TILKYNNA_CLIENT_SECRET}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{KEYCLOAK_BASE_URL}}/auth/realms/{{KEYCLOAK-REALM}}/protocol/openid-connect/token",
							"host": [
								"{{KEYCLOAK_BASE_URL}}"
							],
							"path": [
								"auth",
								"realms",
								"{{KEYCLOAK-REALM}}",
								"protocol",
								"openid-connect",
								"token"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "1. Initial Requests",
			"item": [
				{
					"name": "{{host}}:{{port}}/",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}:{{port}}/",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								""
							]
						},
						"description": "IsServerUp"
					},
					"response": []
				}
			],
			"description": "This ensure that the Tilkynna App is all started correctly. The first hit to server to generate a report takes longer as the BIRT engine needs to startup. "
		},
		{
			"name": "1. Actuator Checks",
			"item": [
				{
					"name": "actuator/health",
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}:{{port}}/actuator/health",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"actuator",
								"health"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "2. DATASOURCES",
			"item": [
				{
					"name": "Create Datasource",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "09f48539-5c28-4db7-bdbc-72427fecb6db",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"pm.test(\"Response time is less than 8000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(8000);",
									"});",
									"",
									"pm.test(\"Check header.status is true.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.header.status).to.eql(true);",
									"});",
									"",
									"pm.test(\"Check header.id returned. Set datasourceId environment variable.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('header');",
									"    pm.environment.set(\"datasourceId\", jsonData.header.id);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"tilkynna\",\n  \"description\": \"Datasource for Tilkynna\",\n  \"connection\": {\n    \"driver\": \"org.postgresql.Driver\",\n    \"url\": \"{{pg_url}}\",\n    \"username\": \"postgres\",\n    \"password\": \"postgres\"\n  }\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}/datasources",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"datasources"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Datasources",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response time is less than 2000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}:{{port}}/datasources",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"datasources"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get 1 Datasources",
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}:{{port}}/datasources/{{datasourceId}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"datasources",
								"{{datasourceId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Datasources empty orderBy",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}:{{port}}/datasources?orderBy=",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"datasources"
							],
							"query": [
								{
									"key": "orderBy",
									"value": ""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Datasources empty orderBy 1 full field",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}:{{port}}/datasources?orderBy=name,desc",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"datasources"
							],
							"query": [
								{
									"key": "orderBy",
									"value": "name,desc"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Datasources with orderBy 2 fields",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}:{{port}}/datasources?orderBy=name,asc&orderBy=description,desc",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"datasources"
							],
							"query": [
								{
									"key": "orderBy",
									"value": "name,asc"
								},
								{
									"key": "orderBy",
									"value": "description,desc"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Datasources with orderBy 1 field, 1 full",
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}:{{port}}/datasources?orderBy=name&orderBy=description",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"datasources"
							],
							"query": [
								{
									"key": "orderBy",
									"value": "name"
								},
								{
									"key": "orderBy",
									"value": "description"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List Drivers",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response time is less than 5000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}:{{port}}/lookups/drivers",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"lookups",
								"drivers"
							]
						}
					},
					"response": []
				},
				{
					"name": "List Connection Types",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response time is less than 5000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}:{{port}}/lookups/connectionTypes",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"lookups",
								"connectionTypes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate Connection Details",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n \n    \"driver\": \"org.postgresql.Driver\",\n    \"url\": \"jdbc:postgresql://localhost:5432/stores\",\n    \"username\": \"postgres\",\n    \"password\": \"postgres\"\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}/datasources/{{datasourceId}}/validate",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"datasources",
								"{{datasourceId}}",
								"validate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Inactivate Datasource",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "99696f36-de27-48f5-8a15-23fea9125866",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}:{{port}}/datasources/{{datasourceId}}/inactivate",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"datasources",
								"{{datasourceId}}",
								"inactivate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate Connection by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}:{{port}}/datasources/{{datasourceId}}/validate",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"datasources",
								"{{datasourceId}}",
								"validate"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "3. TEMPLATES",
			"item": [
				{
					"name": "{{host}}:{{port}}/templates",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}:{{port}}/templates",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"templates"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Template (with Params)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "192c53cd-91fb-4e0e-8718-70671585dc7b",
								"exec": [
									"pm.test(\"Response is CREATED\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Check template ID returned. Set template ID environment variable.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('templateId');",
									"    pm.environment.set(\"paramsTemplateId\", jsonData.templateId);",
									"});",
									"",
									"pm.test(\"Check correct name was returned.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.name).to.eql(\"Top N %\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": ""
								},
								{
									"key": "templateName",
									"value": "Top N %",
									"type": "text"
								},
								{
									"key": "tags",
									"value": "tag1, tag2, tag3",
									"type": "text"
								},
								{
									"key": "datasourceIds",
									"value": "{{datasourceId}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{host}}:{{port}}/templates",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"templates"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetTemplateDetails-TemplateHasParams",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response time is less than 9000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(9000);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}:{{port}}/templates/{{paramsTemplateId}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"templates",
								"{{paramsTemplateId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Template (with no Params)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c85fc227-17ab-4dc7-a945-0ddc050e506d",
								"exec": [
									"pm.test(\"Response is CREATED\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Check template ID returned. Set template ID environment variable.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('templateId');",
									"    pm.environment.set(\"noParamsTemplateId\", jsonData.templateId);",
									"});",
									"",
									"pm.test(\"Check correct name was returned.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.name).to.eql(\"Top Selling Products\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": ""
								},
								{
									"key": "templateName",
									"value": "Template with no params",
									"type": "text"
								},
								{
									"key": "tags",
									"value": "tag1, tag2, tag3",
									"type": "text"
								},
								{
									"key": "datasourceIds",
									"value": "{{datasourceId}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{host}}:{{port}}/templates",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"templates"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetTemplateDetails-NoParams",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response time is less than 5000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}:{{port}}/templates/{{noParamsTemplateId}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"templates",
								"{{noParamsTemplateId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "ListTemplates",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}:{{port}}/templates",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"templates"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "3a. TEMPLATE TAGS",
			"item": [
				{
					"name": "Create Template (with tags)",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response is CREATED\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Check template ID returned.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('templateId');",
									"    pm.environment.set(\"tagsTestTemplateId\", jsonData.templateId);",
									"});",
									"",
									"pm.test(\"Check tempalte tags returned.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('tags');",
									"    pm.expect(jsonData.tags[0].tag).to.eql(\"tag-test1\");",
									"    pm.expect(jsonData.tags[1].tag).to.eql(\"tag-test2\");",
									"    pm.expect(jsonData.tags[2].tag).to.eql(\"tag-test3\");",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": ""
								},
								{
									"key": "templateName",
									"value": "Create Template (with tags)",
									"type": "text"
								},
								{
									"key": "tags",
									"value": "tag-test1, tag-test2, tag-test3",
									"type": "text"
								},
								{
									"key": "datasourceIds",
									"value": "{{datasourceId}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{host}}:{{port}}/templates",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"templates"
							]
						}
					},
					"response": []
				},
				{
					"name": "getTags",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									"",
									"pm.test(\"Check all template tags returned.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].tag).to.eql(\"tag-test1\");",
									"    pm.expect(jsonData[1].tag).to.eql(\"tag-test2\");",
									"    pm.expect(jsonData[2].tag).to.eql(\"tag-test3\");",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}:{{port}}/lookups/tags",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"lookups",
								"tags"
							]
						}
					},
					"response": []
				},
				{
					"name": "getTags : filterTag",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									"",
									"pm.test(\"Check only tag-test2 returned.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].tag).to.eql(\"tag-test2\");",
									"    ",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}:{{port}}/lookups/tags?filterTag=2",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"lookups",
								"tags"
							],
							"query": [
								{
									"key": "filterTag",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete All Template Tags",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response is OK\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}:{{port}}/templates/{{tagsTestTemplateId}}/tags",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"templates",
								"{{tagsTestTemplateId}}",
								"tags"
							]
						},
						"description": "Deletes all tags assigned to a template."
					},
					"response": []
				},
				{
					"name": "Create Tempalte Tags",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response is OK\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Check template ID returned.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('templateId');",
									"});",
									"",
									"pm.test(\"Check template tags returned.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('tags');",
									"    pm.expect(jsonData.tags[0].tag).to.eql(\"create-template-tag-1\");",
									"    pm.expect(jsonData.tags[1].tag).to.eql(\"create-template-tag-2\");",
									"    pm.expect(jsonData.tags[2].tag).to.eql(\"create-template-tag-3\");",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n\t{\n\t\t\"tag\": \"create-template-tag-1\"\n\t},\n\t{\n\t\t\"tag\": \"create-template-tag-2\"\n\t},\n\t{\n\t\t\"tag\": \"create-template-tag-3\"\n\t}\n]"
						},
						"url": {
							"raw": "{{host}}:{{port}}/templates/{{tagsTestTemplateId}}/tags",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"templates",
								"{{tagsTestTemplateId}}",
								"tags"
							]
						},
						"description": "Creates document tags for a given document."
					},
					"response": []
				}
			]
		},
		{
			"name": "4. DESTINATIONS stream",
			"item": [
				{
					"name": "Get Destinations",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response time is less than 6000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(6000);",
									"});",
									"",
									"pm.test(\"Set destinationId environment variable.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0]).to.have.property('id');",
									"    pm.expect(jsonData[0]).to.have.property('status');",
									"    pm.expect(jsonData[0].status).to.eql(\"active\");",
									"  ",
									"    pm.environment.set(\"destinationId\", jsonData[0].id);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}:{{port}}/destinations",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"destinations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate Destination",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}:{{port}}/destinations/{{destinationId}}/validate",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"destinations",
								"{{destinationId}}",
								"validate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Inactivate Destination",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}:{{port}}/destinations/{{destinationId}}/inactivate",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"destinations",
								"{{destinationId}}",
								"inactivate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check Destination Now Inactive",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response time is less than 6000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(6000);",
									"});",
									"",
									"pm.test(\"Set destinationId environment variable.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0]).to.have.property('id');",
									"    pm.expect(jsonData[0]).to.have.property('status');",
									"    pm.expect(jsonData[0].status).to.eql(\"inactive\");",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}:{{port}}/destinations",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"destinations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Activate Destination Again for Further Tests",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}:{{port}}/destinations/{{destinationId}}/validate",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"destinations",
								"{{destinationId}}",
								"validate"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "5. GENERATE_REPORT",
			"item": [
				{
					"name": "Get STREAM Destination",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response time is less than 6000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(6000);",
									"});",
									"",
									"pm.test(\"Set destinationId environment variable.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0]).to.have.property('id');",
									"    pm.environment.set(\"destinationId\", jsonData[0].id);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}:{{port}}/destinations",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"destinations"
							]
						}
					},
					"response": []
				},
				{
					"name": "GenerateReport_ToStream_PDF",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"pm.test(\"Response time is less than 500000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500000);",
									"});",
									"",
									"pm.test(\"Check correlationId returned. Set correlationId environment variable.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('correlationId');",
									"    pm.environment.set(\"correlationId\", jsonData.correlationId);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"callbackUrl\": \"https://myserver.com/notification/callback/here\",\r\n  \"doNotRetry\": false,\r\n  \"exportFormat\": \"PDF\",\r\n  \"reportParameters\": [\r\n    {\r\n      \"name\": \"string\",\r\n      \"value\": \"string\"\r\n    }\r\n  ],\r\n  \"destinationOptions\": {\r\n    \"destinationId\": \"{{destinationId}}\"\r\n  }\r\n}\r\n\r\n"
						},
						"url": {
							"raw": "{{host}}:{{port}}/templates/{{noParamsTemplateId}}/generate",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"templates",
								"{{noParamsTemplateId}}",
								"generate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Report Status",
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}:{{port}}/reports/{{correlationId}}/status",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"reports",
								"{{correlationId}}",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "DownloadReport",
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}:{{port}}/reports/{{correlationId}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"reports",
								"{{correlationId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GenerateReport validate DestinationParams",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"pm.test(\"Response time is less than 500000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500000);",
									"});",
									"",
									"pm.test(\"Check message returned.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('message');",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"callbackUrl\": \"https://myserver.com/notification/callback/here\",\r\n  \"doNotRetry\": false,\r\n  \"exportFormat\": \"PDF\",\r\n  \"reportParameters\": [\r\n    {\r\n      \"name\": \"string\",\r\n      \"value\": \"string\"\r\n    }\r\n  ],\r\n  \"destinationOptions\": {\r\n    \"destinationId\": \"{{destinationId}}\",\r\n    \"destinationParameters\": [\r\n      {\r\n        \"name\": \"not_a_valid_destination_parameter\",\r\n        \"value\": \"string\"\r\n      }\r\n    ]\r\n  }\r\n}\r\n\r\n"
						},
						"url": {
							"raw": "{{host}}:{{port}}/templates/{{noParamsTemplateId}}/generate",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"templates",
								"{{noParamsTemplateId}}",
								"generate"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "4. DESTINATIONS sftp",
			"item": [
				{
					"name": "Create SFTP destination",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Set sftpDestinationId environment variable.\", function () {",
									"    var jsonData = pm.response.json();",
									"  ",
									"    pm.environment.set(\"sftpDestinationId\", jsonData.header.id);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"destinationType\": \"SFTP\",\n  \"host\": \"localhost\",\n  \"port\": \"22\",\n  \"path\" : \"/upload\",\n  \"user\": \"foo\",\n  \"password\": \"pass\",\n  \"header\": {\n    \"name\": \"The sftp server 22\",\n    \"description\": \"our shared sftp server\",\n    \"securityProtocol\": \"ssl\",\n    \"timeout\": 100000,\n    \"downloadable\": false\n  }\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}/destinations",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"destinations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get SFTP Destination",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response time is less than 2000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});",
									"",
									"",
									"pm.test(\"Check fields id and status.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[1]).to.have.property('id');",
									"    pm.expect(jsonData[1]).to.have.property('status');",
									"});",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}:{{port}}/destinations",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"destinations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate Destination",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}:{{port}}/destinations/{{sftpDestinationId}}/validate",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"destinations",
								"{{sftpDestinationId}}",
								"validate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Inactivate Destination",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}:{{port}}/destinations/{{sftpDestinationId}}/inactivate",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"destinations",
								"{{sftpDestinationId}}",
								"inactivate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check Destination Now Inactive",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response time is less than 6000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(6000);",
									"});",
									"",
									"pm.test(\"Set destinationId environment variable.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[1]).to.have.property('id');",
									"    pm.expect(jsonData[1]).to.have.property('status');",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}:{{port}}/destinations",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"destinations"
							]
						}
					},
					"response": []
				},
				{
					"name": "update sftp",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2ddb24f5-5cc8-4e86-9bcd-c93e8207567a",
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"  pm.response.to.have.status(204);",
									"});",
									"pm.test(\"Response time is less than 5000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"destinationType\": \"SFTP\",\n  \"host\": \"changed_host\",\n  \"port\": \"22\",\n  \"path\" : \"/changed_folder\",\n  \"user\": \"changed_user\",\n  \"password\": \"changed_password\",\n  \"header\": {\n    \"name\": \"changed_name\",\n    \"description\": \"changed_description\",\n    \"securityProtocol\": \"ssl\",\n    \"timeout\": 100000,\n    \"downloadable\": false\n  }\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}/destinations/{{sftpDestinationId}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"destinations",
								"{{sftpDestinationId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "4. DESTINATIONS smtp",
			"item": [
				{
					"name": "Create SMTP destination",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Set smtpDestinationId environment variable.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.environment.set(\"smtpDestinationId\", jsonData.header.id);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"destinationType\": \"SMTP\",\n  \"host\": \"localhost\",\n  \"port\": \"22\",\n  \"user\": \"foo\",\n  \"password\": \"pass\",\n  \"fromAddress\": \"fromAddress@here.com\",\n  \"header\": {\n    \"name\": \"SMTP 1\",\n    \"description\": \"our shared smptp server\",\n    \"securityProtocol\": \"ssl\",\n    \"timeout\": 100000,\n    \"downloadable\": false\n  }\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}/destinations",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"destinations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get SMTP Destinations",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response time is less than 6000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(6000);",
									"});",
									"",
									"pm.test(\"Set destinationId environment variable.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[2]).to.have.property('id');",
									"    pm.expect(jsonData[2]).to.have.property('status');",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}:{{port}}/destinations",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"destinations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate SMTP Destination",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}:{{port}}/destinations/{{smtpDestinationId}}/validate",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"destinations",
								"{{smtpDestinationId}}",
								"validate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Inactivate SMTP Destination",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}:{{port}}/destinations/{{smtpDestinationId}}/inactivate",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"destinations",
								"{{smtpDestinationId}}",
								"inactivate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check Destination Now Inactive",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response time is less than 6000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(6000);",
									"});",
									"",
									"pm.test(\"Check environment variable.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[2]).to.have.property('id');",
									"    pm.expect(jsonData[2]).to.have.property('status');",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}:{{port}}/destinations",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"destinations"
							]
						}
					},
					"response": []
				},
				{
					"name": "update smtp",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a0d2acef-2cbe-4117-a68b-8351f05a96d4",
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"  pm.response.to.have.status(204);",
									"});",
									"pm.test(\"Response time is less than 5000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"destinationType\": \"SMTP\",\n  \"host\": \"SMPT_changed_ho3s2t\",\n  \"port\": \"22\",\n  \"user\": \"SMPT_changed_us2e13r\",\n  \"password\": \"SMPT_changed_pas3s2word1\",\n  \"fromAddress\": \"SMPT_fromAddress@here.com\",\n  \"header\": {\n    \"name\": \"SMPT_changed3_n12ame\",\n    \"description\": \"SMPT_changed_desc3r21iption\",\n    \"securityProtocol\": \"ssl\",\n    \"timeout\": 100000,\n    \"downloadable\": false\n  }\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}/destinations/{{smtpDestinationId}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"destinations",
								"{{smtpDestinationId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "4. DESTINATIONS get",
			"item": [
				{
					"name": "Get Destinations",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response time is less than 6000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(6000);",
									"});",
									"",
									"pm.test(\"Set destinationId environment variable.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.environment.set(\"destinationId0\", jsonData[0].id);",
									"    pm.environment.set(\"destinationId1\", jsonData[1].id);",
									"    pm.environment.set(\"destinationId2\", jsonData[2].id);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}:{{port}}/destinations",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"destinations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get STREAM Destination",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response time is less than 2000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});",
									"",
									"pm.test(\"Check destination fields Exist.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('destinationType');",
									"    pm.expect(jsonData).to.have.property('header');",
									"    pm.expect(jsonData.header).to.have.property('id');",
									"    pm.expect(jsonData.header).to.have.property('name');",
									"    pm.expect(jsonData.header).to.have.property('description');",
									"    pm.expect(jsonData.header).to.have.property('status');",
									"    pm.expect(jsonData.header).to.have.property('downloadable');",
									"});",
									"",
									"pm.test(\"Check destination id value = destinationId0.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.header.id).to.eql(pm.environment.get('destinationId0'));",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}:{{port}}/destinations/{{destinationId0}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"destinations",
								"{{destinationId0}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get SFTP Destination",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response time is less than 2000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});",
									"",
									"pm.test(\"Check sftp destination fields Exist.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('destinationType');",
									"    pm.expect(jsonData).to.have.property('header');",
									"    pm.expect(jsonData.header).to.have.property('id');",
									"    pm.expect(jsonData.header).to.have.property('name');",
									"    pm.expect(jsonData.header).to.have.property('description');",
									"    pm.expect(jsonData.header).to.have.property('status');",
									"    pm.expect(jsonData.header).to.have.property('downloadable');",
									"});",
									"",
									"pm.test(\"Check destination id value = destinationId1.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.header.id).to.eql(pm.environment.get('destinationId1'));",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}:{{port}}/destinations/{{destinationId1}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"destinations",
								"{{destinationId1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get SMTP Destination",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response time is less than 2000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});",
									"",
									"pm.test(\"Check destination fields Exist.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('destinationType');",
									"    pm.expect(jsonData).to.have.property('header');",
									"    pm.expect(jsonData.header).to.have.property('id');",
									"    pm.expect(jsonData.header).to.have.property('name');",
									"    pm.expect(jsonData.header).to.have.property('description');",
									"    pm.expect(jsonData.header).to.have.property('status');",
									"    pm.expect(jsonData.header).to.have.property('downloadable');",
									"});",
									"",
									"pm.test(\"Check destination id value = destinationId2.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.header.id).to.eql(pm.environment.get('destinationId2'));",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}:{{port}}/destinations/{{destinationId2}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"destinations",
								"{{destinationId2}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "5. SFTP Destination Integration Tests",
			"item": [
				{
					"name": "Create Datasource 2 TilkynnaDB",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "09f48539-5c28-4db7-bdbc-72427fecb6db",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"pm.test(\"Response time is less than 8000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(8000);",
									"});",
									"",
									"pm.test(\"Check header.status is true.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.header.status).to.eql(true);",
									"});",
									"",
									"pm.test(\"Check header.id returned. Set tilkynnaDatasourceId environment variable.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('header');",
									"    pm.environment.set(\"tilkynnaDatasourceId\", jsonData.header.id);",
									"});",
									"",
									"pm.test(\"log JSON response.\", function () {",
									"    var jsonData = pm.response.json();",
									"    console.log(\"log JSON response.:\", jsonData);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"tilkynna db\",\n  \"description\": \"tilkynna db on k8s deployment\",\n  \"connection\": {\n    \"driver\": \"org.postgresql.Driver\",\n    \"url\": \"{{pg_url}}\",\n    \"username\": \"postgres\",\n    \"password\": \"postgres\"\n  }\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}/datasources",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"datasources"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Template 4 Tilkynna",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4c046214-9a60-4028-9448-96724acba480",
								"exec": [
									"pm.test(\"Response is CREATED\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Check template ID returned. Set template ID environment variable.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('templateId');",
									"    pm.environment.set(\"tilkynnaSampleReportTemplateId\", jsonData.templateId);",
									"});",
									"",
									"pm.test(\"log JSON response.\", function () {",
									"    var jsonData = pm.response.json();",
									"    console.log(\"log JSON response.:\", jsonData);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": ""
								},
								{
									"key": "templateName",
									"value": "Tilkynna Sample Report",
									"type": "text"
								},
								{
									"key": "tags",
									"value": "tilkynnaDatasources",
									"type": "text"
								},
								{
									"key": "datasourceIds",
									"value": "{{tilkynnaDatasourceId}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{host}}:{{port}}/templates",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"templates"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create destination to external SFTP",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8ce04390-0a8e-408a-a5b7-2beb3150e714",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Set externalSftpDestinationId environment variable.\", function () {",
									"    var jsonData = pm.response.json();",
									"  ",
									"    pm.environment.set(\"externalSftpDestinationId\", jsonData.header.id);",
									"});",
									"",
									"pm.test(\"log JSON response.\", function () {",
									"    var jsonData = pm.response.json();",
									"    console.log(\"log JSON response.:\", jsonData);",
									"});",
									"",
									"pm.test(\"Check externalSftpDestinationId is active.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.header.status).to.eql(\"active\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"destinationType\": \"SFTP\",\n  \"host\": \"localhost\",\n  \"port\": \"22\",\n  \"path\" : \"/upload\",\n  \"user\": \"foo\",\n  \"password\": \"pass\",\n  \"header\": {\n    \"name\": \"SFTP server\",\n    \"description\": \"our shared sftp server\",\n    \"securityProtocol\": \"ssl\",\n    \"timeout\": 100000,\n    \"downloadable\": false\n  }\n}"
						},
						"url": {
							"raw": "{{host}}:{{port}}/destinations",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"destinations"
							]
						}
					},
					"response": []
				},
				{
					"name": "GenerateReport 2 external SFTP",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8f8d4d67-7e92-49f1-b6ef-21a215640921",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"pm.test(\"Response time is less than 500000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500000);",
									"});",
									"",
									"pm.test(\"Check correlationId returned. Set correlationId environment variable.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('correlationId');",
									"    pm.environment.set(\"tilkynnaSampleReportCorrelationId\", jsonData.correlationId);",
									"});",
									"",
									"pm.test(\"log JSON response.\", function () {",
									"    var jsonData = pm.response.json();",
									"    console.log(\"log JSON response.:\", jsonData);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"callbackUrl\": \"https://myserver.com/notification/callback/here\",\r\n  \"doNotRetry\": false,\r\n  \"exportFormat\": \"PDF\",\r\n  \"reportParameters\": [\r\n    {\r\n      \"name\": \"DestinationType\",\r\n      \"value\": \"STREAM\"\r\n    }\r\n  ],\r\n  \"destinationOptions\": {\r\n    \"destinationId\": \"{{externalSftpDestinationId}}\",\r\n    \"destinationParameters\": [\r\n      {\r\n        \"name\": \"path\",\r\n        \"value\": \"sub_folder\"\r\n      }\r\n    ]\r\n  }\r\n}\r\n\r\n"
						},
						"url": {
							"raw": "{{host}}:{{port}}/templates/{{tilkynnaSampleReportTemplateId}}/generate",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"templates",
								"{{tilkynnaSampleReportTemplateId}}",
								"generate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Report Status tilkynnaSampleReportCorrelationId 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "46f96b43-2cad-4d43-a430-63ffc3812d6f",
								"exec": [
									"pm.test(\"Check report status tilkynnaSampleReportCorrelationId 1.\", function () {",
									"    var jsonData = pm.response.json();",
									"    console.log(\"tilkynnaSampleReportCorrelationId status:\", jsonData);",
									"    ",
									"    console.log(pm.response.json());",
									"    ",
									"    setTimeout(function() {",
									"          console.log(\"Sleeping for 60 seconds before next request.\");",
									"          console.log(pm.response.json());",
									"    }, 60000);",
									"    ",
									"    ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}:{{port}}/reports/{{tilkynnaSampleReportCorrelationId}}/status",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"reports",
								"{{tilkynnaSampleReportCorrelationId}}",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "Report Status tilkynnaSampleReportCorrelationId 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "46f96b43-2cad-4d43-a430-63ffc3812d6f",
								"exec": [
									"pm.test(\"Check report status tilkynnaSampleReportCorrelationId 1.\", function () {",
									"    var jsonData = pm.response.json();",
									"    console.log(\"tilkynnaSampleReportCorrelationId status:\", jsonData);",
									"});",
									"",
									"",
									"pm.test(\"Check reportstatus is finished.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(\"finished\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}:{{port}}/reports/{{tilkynnaSampleReportCorrelationId}}/status",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"reports",
								"{{tilkynnaSampleReportCorrelationId}}",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "DownloadReport tilkynnaSampleReportCorrelationId",
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}:{{port}}/reports/{{tilkynnaSampleReportCorrelationId}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"reports",
								"{{tilkynnaSampleReportCorrelationId}}"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "oauth2",
		"oauth2": [
			{
				"key": "accessToken",
				"value": "{{session_access_token}}",
				"type": "string"
			},
			{
				"key": "addTokenTo",
				"value": "header",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "9ab803cd-cdb0-49a9-a772-fc90a671544c",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "442620ce-692a-46be-b853-aa88e21633b5",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}